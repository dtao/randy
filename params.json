{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Randy","google":"","tagline":"Randy makes it that much easier to generate random stuff","body":"# Randy\r\n\r\nA little library for easily producing random data using Ruby's built-in `rand` function.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'randy'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install randy\r\n\r\n## Usage\r\n\r\nCurrently **randy** can produce two kinds of random data (in theory this will change).\r\n\r\n### Strings\r\n\r\nThe original main purpose of this library is to produce random strings easily.\r\n\r\nFor example, to produce a random 10-character string:\r\n\r\n    # Example output: BASWCEV3TQ\r\n    Randy.string(10)\r\n\r\nBy default, the result string will comprise characters from the digits 0-9 and the English alphabet.\r\n\r\nThis can be changed by specifying the characters to be used:\r\n    \r\n    # Example output: baaabbabac\r\n    Randy.string(10, \"abc\")\r\n\r\n### Numbers\r\n\r\nIt's already easy to produce random numbers using Ruby. However, **randy** makes it *even easier*.\r\n\r\nTo produce a random *integer*, just specify a range:\r\n\r\n    # Will include some number between 1 and 10\r\n    Randy.integer(1..10)\r\n\r\nThe result will be consistent with how Ruby ranges work; that is, an inclusive range (`..`) will potentially include the upper bound while an exclusive range (`...`) will not.\r\n\r\nAdmittedly, the above is quite trivial to implement by hand, e.g., with `1 + rand(10)`. Think of it simply as a nicer interface to `rand`.\r\n\r\nThe same functionality is also exposed to decimal values:\r\n\r\n    Randy.decimal((1.4)..(6.2))\r\n"}